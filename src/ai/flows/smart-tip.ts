// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that suggests a personalized tip percentage based on
 * dining experience details.
 *
 * - smartTipSuggestion - A function that handles the tip suggestion process.
 * - SmartTipInput - The input type for the smartTipSuggestion function.
 * - SmartTipOutput - The return type for the smartTipSuggestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SmartTipInputSchema = z.object({
  speedOfService: z
    .string()
    .describe("How would you rate the speed of service? (e.g., 'very slow', 'slow', 'average', 'fast', 'very fast')"),
  serverAttentiveness: z
    .string()
    .describe("How would you rate the server's attentiveness? (e.g., 'not attentive', 'slightly attentive', 'attentive', 'very attentive')"),
  foodQuality: z
    .string()
    .describe("How would you rate the quality of the food? (e.g., 'bad', 'poor', 'average', 'good', 'excellent')"),
});
export type SmartTipInput = z.infer<typeof SmartTipInputSchema>;

const SmartTipOutputSchema = z.object({
  tipPercentage: z
    .number()
    .describe('The suggested tip percentage based on the dining experience.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the suggested tip percentage.'),
});
export type SmartTipOutput = z.infer<typeof SmartTipOutputSchema>;

export async function smartTipSuggestion(input: SmartTipInput): Promise<SmartTipOutput> {
  return smartTipFlow(input);
}

const smartTipPrompt = ai.definePrompt({
  name: 'smartTipPrompt',
  input: {schema: SmartTipInputSchema},
  output: {schema: SmartTipOutputSchema},
  prompt: `You are a helpful AI assistant that suggests a tip percentage based on the user's dining experience.

  Consider the following aspects of the dining experience:
  - Speed of service: {{{speedOfService}}}
  - Server attentiveness: {{{serverAttentiveness}}}
  - Food quality: {{{foodQuality}}}

  Based on these factors, suggest a tip percentage and explain your reasoning. The tipPercentage should be a number (e.g., 15, 20, 25). Always include reasoning for the suggested tip percentage.
  Ensure that the output can be parsed as valid JSON.
  The output should be of the following format:
  {
    "tipPercentage": number,
    "reasoning": string
  }
  `,
});

const smartTipFlow = ai.defineFlow(
  {
    name: 'smartTipFlow',
    inputSchema: SmartTipInputSchema,
    outputSchema: SmartTipOutputSchema,
  },
  async input => {
    const {output} = await smartTipPrompt(input);
    return output!;
  }
);
